filter(between(Data.mostreig, period[1], period[2]))
data+
data
period <- wave2
period[1]
period[2]
data <- sum_N1_inh %>%
filter(between(Data.mostreig, period[1], period[2]))
data
data <- sum_N1_inh %>%
filter(between(ymd(Data.mostreig), period[1], period[2]))
View(data)
cor_wave <- function(period){
data <- sum_N1_inh %>%
filter(between(ymd(Data.mostreig), period[1], period[2]))
cor.test(data$sum_N1, data$sum_7)$estimate
}
waves <- list(wave2, wave3, wave4, wave5, wave6)
waves
map_dbl(waves)
map_dbl(waves, cor_wave)
data <- sum_N1_inh %>%
filter(between(ymd(Data.mostreig), period[1], period[2]))
cor.test(data$sum_N1, data$sum_7)$estimate
period <- wave3
data <- sum_N1_inh %>%
filter(between(ymd(Data.mostreig), period[1], period[2]))
cor.test(data$sum_N1, data$sum_7)$estimate
cols <- c("N1"= color1, "Cases" = color2) #, "vaccine doses" = color3)
event <- "#575757"
event_line <- "dashed"
ratio <-  max(sum_N1_inh$sum_N1_inh, na.rm=T) / max(sum_N1_inh$sum_7_inh)
cols <- c("N1"= color1, "Cases" = color2) #, "2nd vaccine doses" = color3, "1st vaccine doses" = "lightblue")
event <- "#575757"
event_line <- "dashed"
(p1 <- ggplot(sum_N1_inh, aes(x=Data.mostreig))+
geom_col(aes(y=sum_7_inh*ratio, fill = "Cases"))+
geom_line(aes(y=sum_N1_inh, group=1, color="N1"), size = linesize)+
#geom_line(aes(y=accum_2_1000*ratio, group=1, color="2nd vaccine doses"), size=0.8)+
#geom_line(aes(y=accum_1_1000*ratio, group=1, color="1st vaccine doses"), size=0.8)+
scale_y_continuous(name="Total viral load N1 (GC/day/100,000 inhabitants)",
sec.axis = sec_axis(trans=~./ratio,
name="COVID-19 cases (cases/100,000 inhabitants)"))+
scale_x_discrete(breaks=date_breaks)+
theme(legend.title = element_blank())+#, text=element_text(size=30, lineheight = 0.3))+
scale_color_manual(name="", values=cols)+
scale_fill_manual(name="", values=cols)+
labs(x=title)+
annotate("text", x= 8, y= max(sum_N1_inh$sum_N1_inh*0.9),
label = corr_text, size=3, parse=T)+
# geom_vline(xintercept = "2020-12-07", color=event, linetype = event_line)+
# geom_vline(xintercept = "2021-03-15", color=event, linetype = event_line)+
annotate("text", x="2020-10-26", y=-10^12.1, label=expression("2"^"nd"~wave), size=3)+
annotate("text", x="2021-01-18", y=-10^12.1, label=expression("3"^"rd"~wave), size=3)+
annotate("text", x="2021-04-26", y=-10^12.1, label=expression("4"^"th"~wave), size=3)+
annotate("text", x="2021-08-02", y=-10^12.1, label=expression("5"^"th"~wave), size=3)+
annotate("text", x="2021-12-06", y=-10^12.1, label=expression("6"^"th"~wave), size=3)+
theme_classic()+
theme(axis.text.x = element_text(angle=90, vjust=0.5))+
theme(axis.title = element_text(size=9)))
correlation <- cor.test(sum_N1_inh$sum_N1, sum_N1_inh$sum_7, pairwise.obs = T)
corr_text <- paste("R[Pearson] == ", round(correlation$estimate, digits = 2))
cols <- c("N1"= color1, "Cases" = color2) #, "vaccine doses" = color3)
event <- "#575757"
event_line <- "dashed"
ratio <-  max(sum_N1_inh$sum_N1_inh, na.rm=T) / max(sum_N1_inh$sum_7_inh)
cols <- c("N1"= color1, "Cases" = color2) #, "2nd vaccine doses" = color3, "1st vaccine doses" = "lightblue")
event <- "#575757"
event_line <- "dashed"
(p1 <- ggplot(sum_N1_inh, aes(x=Data.mostreig))+
geom_col(aes(y=sum_7_inh*ratio, fill = "Cases"))+
geom_line(aes(y=sum_N1_inh, group=1, color="N1"), size = linesize)+
#geom_line(aes(y=accum_2_1000*ratio, group=1, color="2nd vaccine doses"), size=0.8)+
#geom_line(aes(y=accum_1_1000*ratio, group=1, color="1st vaccine doses"), size=0.8)+
scale_y_continuous(name="Total viral load N1 (GC/day/100,000 inhabitants)",
sec.axis = sec_axis(trans=~./ratio,
name="COVID-19 cases (cases/100,000 inhabitants)"))+
scale_x_discrete(breaks=date_breaks)+
theme(legend.title = element_blank())+#, text=element_text(size=30, lineheight = 0.3))+
scale_color_manual(name="", values=cols)+
scale_fill_manual(name="", values=cols)+
labs(x=title)+
annotate("text", x= 8, y= max(sum_N1_inh$sum_N1_inh*0.9),
label = corr_text, size=3, parse=T)+
# geom_vline(xintercept = "2020-12-07", color=event, linetype = event_line)+
# geom_vline(xintercept = "2021-03-15", color=event, linetype = event_line)+
annotate("text", x="2020-10-26", y=-10^12.1, label=expression("2"^"nd"~wave), size=3)+
annotate("text", x="2021-01-18", y=-10^12.1, label=expression("3"^"rd"~wave), size=3)+
annotate("text", x="2021-04-26", y=-10^12.1, label=expression("4"^"th"~wave), size=3)+
annotate("text", x="2021-08-02", y=-10^12.1, label=expression("5"^"th"~wave), size=3)+
annotate("text", x="2021-12-06", y=-10^12.1, label=expression("6"^"th"~wave), size=3)+
theme_classic()+
theme(axis.text.x = element_text(angle=90, vjust=0.5))+
theme(axis.title = element_text(size=9)))
small_plots <- theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(),
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
axis.title.x = element_text(size=9),
axis.title.y = element_blank(), legend.position = "none")
#create small plots
p2 <- getPlot(min = 150000, title="WWTP larger than 150,000 inhabitants", linesize = 0.8)
p2 <- p2+small_plots
p3 <- getPlot(max = 150000, title ="WWTP smaller than 150,000 inhabitants", linesize = 0.8)
p3 <- p3+small_plots
#patch all plots
p1 / (p2 + p3) + plot_layout(heights = c(8,2,2))
#save the result
ggsave("../results/corr_plot.png", width = 20, height = 15, units = "cm")
map_dbl(waves, cor_wave)
library(tidyverse)
data <- load_excel(remove_first = F)
source(functions.R)
source("functions.R")
data <- load_excel(remove_first = F)
data <- load_excel(remove_first = F)
data <- load_excel(filename = "Mostres_newest.csv", folder="data", remove_first = F)
max(data$YMDmostreig)
#load data on target N1 without detection threshold
N1_data <- target_data(data = data, diana = "N1")
wave2 <- c("2020-09-01", "2020-10-31")
waves <- tribble(
~Wave, ~Start, ~End,
2, "2020-09-01", "2020-10-31",
3, "2020-12-01", "2021-02-28",
4, "2021-03-01", "2021-04-30",
5, "2021-07-01", "2021-08-31",
6, "2021-11-01", "2022-03-31"
)
View(waves)
#function to correlate one edar and one wave
N1_data %>%
#function to correlate one edar and one wave
wave <- waves %>%
filter(Wave == 1)
library(tidyverse)
#function to correlate one edar and one wave
wave <- waves %>%
filter(Wave == 1)
#function to correlate one edar and one wave
wave <- waves %>%
filter(Wave == 2)
N1_data %>%
filter(Data.mostreig > wave$Start,
Data.mostreig < wave$End)
wave_data <- N1_data %>%
filter(Data.mostreig > wave$Start,
Data.mostreig < wave$End)
View(wave_data)
wave_data <- N1_data %>%
filter(Data.mostreig > wave$Start,
Data.mostreig < wave$End) %>%
filter(EDAR == "DGIR")
View(wave_data)
cor.test(wave_data$log_7, wave_data$log)
correlation <- cor.test(wave_data$log_7, wave_data$log)
correlation$statistic
correlation$p.value
correlation$estimate
wave %>%
mutate(EDAR = "DGIR",
correlation = correlation$estimate,
p.value = correlation$p.value)
wave %>%
mutate(EDAR = "DGIR",
correlation = correlation$estimate,
p_value = correlation$p.value)
wave %>%
mutate(EDAR = "DGIR",
cor_value = correlation$estimate,
p_value = correlation$p.value)
#function to correlate one edar and one wave
one_one <- function(data, n_wave, edar){
wave <- waves %>%
filter(Wave == n_wave)
wave_data <- N1_data %>%
filter(Data.mostreig > wave$Start,
Data.mostreig < wave$End) %>%
filter(EDAR == edar)
correlation <- cor.test(wave_data$log_7, wave_data$log)
correlation$p.value
correlation$estimate
wave %>%
mutate(EDAR = edar,
cor_value = correlation$estimate,
p_value = correlation$p.value)
}
#function to correlate one edar and one wave
one_one <- function(n_wave, edar){
wave <- waves %>%
filter(Wave == n_wave)
wave_data <- N1_data %>%
filter(Data.mostreig > wave$Start,
Data.mostreig < wave$End) %>%
filter(EDAR == edar)
correlation <- cor.test(wave_data$log_7, wave_data$log)
correlation$p.value
correlation$estimate
wave %>%
mutate(EDAR = edar,
cor_value = correlation$estimate,
p_value = correlation$p.value)
}
one_one(2, "DGIR")
one_one(3, "DGIR")
range(waves$Wave)
?range
seq(waves$Wave)
waves$Wave
#function to iterate waves
map_dfr(waves$Wave, one_one)
#function to iterate waves
map_dfr(waves$Wave, ~one_one(.x, "DGIR"))
#function to iterate waves
function(edar){
map_dfr(waves$Wave, ~one_one(.x, edar))
}
#function to iterate waves
all_waves <- function(edar){
map_dfr(waves$Wave, ~one_one(.x, edar))
}
unique(N1_data$EDAR)
#iterate all edars and all vawes
map_dfr(unique(N1_data$EDAR), all_waves)
#function to correlate one edar and one wave
one_one <- function(n_wave, edar){
wave <- waves %>%
filter(Wave == n_wave)
wave_data <- N1_data %>%
filter(Data.mostreig > wave$Start,
Data.mostreig < wave$End) %>%
filter(EDAR == edar)
if (nrow(wave_data) > 3){
correlation <- cor.test(wave_data$log_7, wave_data$log)
corr_value <- correlation$estimate
p_value <- correlation$p.value
comment <- ""
} else {
corr_value <- NA_real_
p_value <- NA_real_
comment <- "Not enough observations"
}
wave %>%
mutate(EDAR = edar,
cor_value = corr_value,
p_value = p_value,
n = nrow(wave_data),
comments = comment)
}
#function to iterate waves
all_waves <- function(edar){
map_dfr(waves$Wave, ~one_one(.x, edar))
}
#iterate all edars and all vawes
map_dfr(unique(N1_data$EDAR), all_waves)
#iterate all edars and all vawes
correlations <- map_dfr(unique(N1_data$EDAR), all_waves)
View(correlations)
one_one(5, "DAIT")
n_vawe <- 5
edar <- "DAIT"
wave <- waves %>%
filter(Wave == n_wave)
n_wave <- 5
wave <- waves %>%
filter(Wave == n_wave)
View(wave)
wave_data <- N1_data %>%
filter(Data.mostreig > wave$Start,
Data.mostreig < wave$End) %>%
filter(EDAR == edar)
View(wave_data)
var(wave_data$log_7)
7:7
var(c(7,7,7,7,7,7,7))
var(1:7)
#function to correlate one edar and one wave
one_one <- function(n_wave, edar){
wave <- waves %>%
filter(Wave == n_wave)
wave_data <- N1_data %>%
filter(Data.mostreig > wave$Start,
Data.mostreig < wave$End) %>%
filter(EDAR == edar)
if (nrow(wave_data) > 3){
correlation <- cor.test(wave_data$log_7, wave_data$log)
corr_value <- correlation$estimate
p_value <- correlation$p.value
comment <- ""
} else if(var(wave_data$log_7) == 0){
corr_value <- NA_real_
p_value <- NA_real_
comment <- "No cases to estimate the correlation"
} else {
corr_value <- NA_real_
p_value <- NA_real_
comment <- "Not enough observations"
}
wave %>%
mutate(EDAR = edar,
cor_value = corr_value,
p_value = p_value,
n = nrow(wave_data),
comments = comment)
}
#function to iterate waves
all_waves <- function(edar){
map_dfr(waves$Wave, ~one_one(.x, edar))
}
#iterate all edars and all vawes
correlations <- map_dfr(unique(N1_data$EDAR), all_waves)
var(wave_data$log_7)
#function to correlate one edar and one wave
one_one <- function(n_wave, edar){
wave <- waves %>%
filter(Wave == n_wave)
wave_data <- N1_data %>%
filter(Data.mostreig > wave$Start,
Data.mostreig < wave$End) %>%
filter(EDAR == edar)
if (nrow(wave_data) > 3){
correlation <- cor.test(wave_data$log_7, wave_data$log)
corr_value <- correlation$estimate
p_value <- correlation$p.value
comment <- ""
} else if(var(wave_data$log_7, na.rm = T) == 0){
corr_value <- NA_real_
p_value <- NA_real_
comment <- "No cases to estimate the correlation"
} else {
corr_value <- NA_real_
p_value <- NA_real_
comment <- "Not enough observations"
}
wave %>%
mutate(EDAR = edar,
cor_value = corr_value,
p_value = p_value,
n = nrow(wave_data),
comments = comment)
}
#function to iterate waves
all_waves <- function(edar){
map_dfr(waves$Wave, ~one_one(.x, edar))
}
#iterate all edars and all vawes
correlations <- map_dfr(unique(N1_data$EDAR), all_waves)
wave_data <- N1_data %>%
filter(Data.mostreig > wave$Start,
Data.mostreig < wave$End) %>%
filter(EDAR == edar)
nrow(wave_data) > 3
var(wave_data$log_7, na.rm = T) == 0
#function to iterate waves
all_waves <- function(edar){
map_dfr(waves$Wave, ~one_one(.x, edar))
}
#iterate all edars and all vawes
correlations <- map_dfr(unique(N1_data$EDAR), all_waves)
wave_data <- N1_data %>%
filter(Data.mostreig > wave$Start,
Data.mostreig < wave$End) %>%
filter(EDAR == edar)
if (nrow(wave_data) < 3){
corr_value <- NA_real_
p_value <- NA_real_
comment <- "Not enough observations"
} else if(var(wave_data$log_7, na.rm = T) == 0){
corr_value <- NA_real_
p_value <- NA_real_
comment <- "No cases to estimate the correlation"
} else {
correlation <- cor.test(wave_data$log_7, wave_data$log)
corr_value <- correlation$estimate
p_value <- correlation$p.value
comment <- ""
}
#function to correlate one edar and one wave
one_one <- function(n_wave, edar){
wave <- waves %>%
filter(Wave == n_wave)
wave_data <- N1_data %>%
filter(Data.mostreig > wave$Start,
Data.mostreig < wave$End) %>%
filter(EDAR == edar)
if (nrow(wave_data) < 3){
corr_value <- NA_real_
p_value <- NA_real_
comment <- "Not enough observations"
} else if(var(wave_data$log_7, na.rm = T) == 0){
corr_value <- NA_real_
p_value <- NA_real_
comment <- "No cases to estimate the correlation with N1"
} else {
correlation <- cor.test(wave_data$log_7, wave_data$log)
corr_value <- correlation$estimate
p_value <- correlation$p.value
comment <- ""
}
wave %>%
mutate(EDAR = edar,
cor_value = corr_value,
p_value = p_value,
n = nrow(wave_data),
comments = comment)
}
#function to iterate waves
all_waves <- function(edar){
map_dfr(waves$Wave, ~one_one(.x, edar))
}
#iterate all edars and all vawes
correlations <- map_dfr(unique(N1_data$EDAR), all_waves)
View(correlations)
correlations %>%
write_excel_csv2("../results/correlations_by_wave.csv")
## String with decimal comma to numeric
comma_to_numeric <- function(X){
as.numeric(gsub(",",".", X))
}
filename = "Mostres_newest.csv"
folder=paste(dirname(rstudioapi::getSourceEditorContext()$path), "data", sep="/")
remove_first = FALSE
data <- read.csv2(paste(folder,filename, sep="/"), dec = '.', na.strings=c("","NA"))
read.csv2(paste(folder,filename, sep="/"), dec = '.', na.strings=c("","NA"))
library(tidyverse)
library(lubridate)
library(conflicted)
library(tidyverse)
library(lubridate)
library(conflicted)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
data <- read.csv2(paste(folder,filename, sep="/"), dec = '.', na.strings=c("","NA"))
#string to numeric replacing commas by points
mutate(
data,
across(
Cabal.influent.últimes.24h.calculat,
contains("casos"),
~ comma_to_numeric(.x)
)
)
?across
#string to numeric replacing commas by points
mutate(
data,
across(
contains("casos"),
.fns = ~ comma_to_numeric(.x)
)
)
#string to numeric replacing commas by points
mutate(
data,
across(contains("casos"), .fns = ~ comma_to_numeric(.x))
)
folder
data <- read.csv2(paste(folder,filename, sep="/"), dec = '.', na.strings=c("","NA"))
read.csv2(paste(folder,filename, sep="/"), dec = '.', na.strings=c("","NA"))
paste(folder,filename, sep="/")
filename = "Mostres_newest2.csv"
read.csv2(paste(folder,filename, sep="/"), dec = '.', na.strings=c("","NA"))
library(tidyverse)
library(lubridate)
library(conflicted)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
## String with decimal comma to numeric
comma_to_numeric <- function(X){
as.numeric(gsub(",",".", X))
}
filename = "Mostres_newest.csv"
folder=paste(dirname(rstudioapi::getSourceEditorContext()$path), "data", sep="/")
remove_first = FALSE
data <- read.csv2(paste(folder,filename, sep="/"), dec = '.', na.strings=c("","NA"))
data
#remove samples without data
data <- data[!is.na(data$Data.mostreig),]
#string to dates
data$YMDmostreig <- ymd(data$Data.mostreig)
#move uncorrected dates
correctDates <- seq(min(data$YMDmostreig), max(data$YMDmostreig), by=7)
for (i in 1:nrow(data)){
j <- -3
newDate <- data$YMDmostreig[i]
while (!(newDate %in% correctDates) && j <= 3){
newDate <- data$YMDmostreig[i]+j
j <- j+1
}
data$YMDmostreig[i] <- newDate
}
data$Data.mostreig <- as.character(data$YMDmostreig)
# if remove_first is true, remove the july and august 2020
if (remove_first){
data <- filter(data, YMDmostreig >= "2020-09-01")
}
#string to numeric replacing commas by points
mutate(
data,
across(contains("casos"), .fns = ~ comma_to_numeric(.x))
)
#string to numeric replacing commas by points
mutate(
data,
across(contains("casos"), .fns = ~ comma_to_numeric(.x))
) |>
as_tibble()
as_tibble(data)
colnames(data)[str_detect(colnames(data), "casos")]
#string to numeric replacing commas by points
data <- mutate(data, across(contains("casos"), .fns = ~ comma_to_numeric(.x)))
data
data$Nº.casos.darrers.7.dies..acum.
data$Cabal.influent.últimes.24h.calculat <- comma_to_numeric(data$Cabal.influent.últimes.24h.calculat)
